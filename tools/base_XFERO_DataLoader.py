#!/usr/local/bin/python3.3import sqlite3 as liteimport xfero.db.manage_function as db_functionimport xfero.db.manage_control as db_controlimport xfero.db.manage_av_pattern as db_av_patternimport xfero.db.manage_schedule as db_scheduleimport xfero.db.manage_partner as db_partnerimport xfero.db.manage_cots_pattern as db_cots_patternimport xfero.db.manage_priority as db_priorityimport xfero.db.manage_route as db_routeimport xfero.db.manage_workflow as db_workflowimport xfero.db.manage_xfer as db_xferdef insert_XFERO_Function():    '''    **Purpose:**    Simple data insertion script for the FTH_Function table    +------------+-------------+----------------------------------------------------+    | Date       | Author      | Change Details                                     |    +============+=============+====================================================+    | 02/07/2013 | Chris Falck | Created                |    +------------+-------------+----------------------------------------------------+    '''    for t in [        ('av_check', 'Anti_Virus', 'Function to Anti-Virus check a file', '[uvscan -c -v]'),        ('to_upper', 'Case_Converter', 'Function to convert file name to upper case', 'NULL'),        ('to_lower', 'Case_Converter', 'Function to convert file name to lower case', 'NULL'),        ('delete_extension', 'Transform_Filename', 'Function to delete file name extension', 'NULL'),        ('cksum', 'Checksum', 'Function to produce a Checksum of a file or files in a directory', 'NULL'),        ('add_extension', 'Transform_Filename', 'Function to add a file extension to the filename', '[Extension to add to file]'),        ('add_prefix', 'Transform_Filename', 'Function to add a Prefix to the filename', '[Prefix_]'),        ('add_suffix', 'Transform_Filename', 'Function to add a Suffix to the filename', '[_Suffix]'),        ('copy_file', 'Copy_File', 'Function to copy a file in the same directory adding an underscore followed by a timestamp to create a unique name', '[N/A]'),        ('move_file', 'Copy_File', 'Function to Move a file to a specified directory', '[Target Directory]'),        ('insert_name_part', 'Transform_Filename', 'Function to insert text into the filename', '[eye-catcher, insert_element, Before or After eye-catcher]'),        ('compress_file', 'Manage_Archives', 'Function to compress file to tar.gz or zip formatted archive', '[tar.gz or zip]'),        ('compress_dir', 'Manage_Archives', 'Function to compress a directory to tar.gz or zip formatted archive', '[tar.gz or zip]'),        ('extract', 'Manage_Archives', 'Function to extract a tar.gz or zip formatted archive', '[Extract Path]'),        ('encrypt_file', 'Crypt', 'Function to encrypt a file', '[pgp --encrypt filename]'),        ('decrypt_file', 'Crypt', 'Function to decrypt a file', '[pgp --decrypt filename --passphrase passphrase]'),        ('split', 'Split_File', 'Function to split a large file into smaller files', '[number of chunks to split file into]'),        ('merge', 'Split_File', 'Function to merge split file', '[number of chunks to re-constitute into a single file]'),        ('exit', 'Exit', 'Function to execute an external program as part of workflow', '[exit_call]'),        ('dos2unix', 'Line_End_Converter', 'Function to convert from a dos line endings to unix', '[N/A]'),        ('unix2dos', 'Line_End_Converter', 'Function to convert from a unix line endings to dos', '[N/A]'),         ]:        function_name, function_class, function_description, function_prototype = t        result = db_function.create_XFERO_Function(function_name, function_class, function_description, function_prototype)        print(result)def insert_XFERO_Control():    '''    **Purpose:**    Simple data insertion script for the FTH_Control table    +------------+-------------+----------------------------------------------------+    | Date       | Author      | Change Details                                     |    +============+=============+====================================================+    | 02/07/2013 | Chris Falck | Ported from Perl Version (FalckMon)                |    +------------+-------------+----------------------------------------------------+    '''    for t in [        ('STOPPED','NULL','NULL','10'),        ]:        (control_status, control_key, control_passphrase, control_num_threads) = t        result = db_control.create_XFERO_Control(control_status, control_key, control_passphrase, control_num_threads)        print(result)def insert_XFERO_AV_Pattern():    '''    **Purpose:**    Simple data insertion script for the FTH_AV_Pattern table    +------------+-------------+----------------------------------------------------+    | Date       | Author      | Change Details                                     |    +============+=============+====================================================+    | 02/07/2013 | Chris Falck | Ported from Perl Version (FalckMon)                |    +------------+-------------+----------------------------------------------------+    '''    for t in [        ('McAfee VirusScan', 'FTH_MCAFEE_AV_PATTERN', 'uvscan -c -v {File_to_Check}'),         ]:        avpattern_product, avpattern_pattern_name, avpattern_params = t        result = db_av_pattern.create_XFERO_AV_Pattern(avpattern_product, avpattern_pattern_name, avpattern_params)        print(result)def insert_XFERO_Scheduled_Task():    '''    **Purpose:**    Simple data insertion script for the FTH_Scheduled_Task table    +------------+-------------+----------------------------------------------------+    | Date       | Author      | Change Details                                     |    +============+=============+====================================================+    | 02/07/2013 | Chris Falck | Ported from Perl Version (FalckMon)                |    +------------+-------------+----------------------------------------------------+    '''    #scheduled_task_id, scheduled_task_name, scheduled_task_function, scheduled_task_year, scheduled_task_month, scheduled_task_day,    #scheduled_task_week, scheduled_task_day_of_week,  scheduled_task_hour, scheduled_task_minute, scheduled_task_second, scheduled_task_args,    #scheduled_task_active    for t in [('Monitor Task','monitor.dirmon','NULL','NULL','NULL','NULL','NULL','NULL','*/1','NULL','NULL','1'),              ('Purge XFERO Processing Directory and Sub-directories','housekeeping.delete_old_files','NULL','NULL','NULL','NULL','NULL','NULL','*/30','NULL','/xfero/processing, ^.*, 0.02, True','1'),              ('Purge XFERO Transient Directory','housekeeping.delete_old_files','NULL','NULL','NULL','NULL','NULL','NULL','*/30','NULL','/xfero/transient, ^.*, 0.02, False','1'),              ('Purge XFERO logs','housekeeping.delete_old_files','NULL','NULL','NULL','NULL','NULL','23','NULL','NULL','/TickboxConsulting/XFERO/logs, ^(HK.log | SYSINFO.log| FTSTATS.log | XFERO.log |SCHED_TASK.log), 10, False','1'),              ('Collect Server Performance Statistics','xfero_stats.collect','NULL','NULL','NULL','NULL','NULL','NULL','*/30','NULL','NULL','1'),        ]:        scheduled_task_name, scheduled_task_function, scheduled_task_year, scheduled_task_month, scheduled_task_day, scheduled_task_week, scheduled_task_day_of_week, scheduled_task_hour, scheduled_task_minute, scheduled_task_second, scheduled_task_args, scheduled_task_active = t        #print(scheduled_task_name, scheduled_task_function)        result = db_schedule.create_XFERO_Scheduled_Task(scheduled_task_name, scheduled_task_function, scheduled_task_year, scheduled_task_month, scheduled_task_day, scheduled_task_week, scheduled_task_day_of_week, scheduled_task_hour, scheduled_task_minute, scheduled_task_second, scheduled_task_args, scheduled_task_active)        print(result)def insert_XFERO_COTS_Pattern():    '''    **Purpose:**    Simple data insertion script for the FTH_COTS_Pattern table    +------------+-------------+----------------------------------------------------+    | Date       | Author      | Change Details                                     |    +============+=============+====================================================+    | 02/07/2013 | Chris Falck | Ported from Perl Version (FalckMon)                |    +------------+-------------+----------------------------------------------------+    | 28/04/2015 | Chris Falck | Added COTS Prototypes for Impart and CFT           |    +------------+-------------+----------------------------------------------------+    '''    #cotspattern_id  cotspattern_product  cotspattern_pattern_name  cotspattern_prototype    #1            BJI                IMPART                cmdftf dest=[Vme_System_ID] code=[Code] mode=[Mode] file={File_to_Send_with_Path} rfile={Remote_File_Name} user=[Local_Username] pass=[Local_Password] ruser=[Remote_User] rupass=[Remote_Password]    #2            FTP                FTP_IGNORE_TLS        curl -v -T {File_to_Send_with_Path} --cacert [CA_Cert] -k --ftp-ssl --cert [Cert_Bundle] --user [User]:[Password] ftp://[Common_Name]:[FTP_Ctrl_Port]/{Remote_File_Name}    #3            FTP                FTP_WITH_TLS        curl -v -T {File_to_Send_with_Path} --cacert [CA_Cert] -ftp-ssl --cert [Cert_Bundle] --user [User]:[Password] ftp://[Common_Name]:[FTP_Ctrl_Port]/{Remote_File_Name}    #4            FTP                FTP_CLEAR            curl -v -T {File_to_Send_with_Path] --user [User]:[Password] ftp://[Common_Name]:[FTP_Ctrl_Port]/{Remote_File_Name}    #5            CFT                CFT_BASIC            cftutil send part=[Send_to_Partner], idf=[IDF_Name], fname={File_to_Send_with_Path}    #6            CFT                CFT_WITH_PARM        cftutil send part=[Send_to_Partner], idf=[IDF_Name], parm=[PARM_ID[, fname={File_to_Send_with_Path}    #7            CFT                CFT_WITH_NFNAME    cftutil send part=[Send_to_Partner], idf=[IDF_Name], fname={File_to_Send_with_Path}, nfname={Remote_File_Name}    #8            CFT                CFT_PARM_NFNAME    cftutil send part=[Send_to_Partner], idf=[IDF_Name], [PARM_ID], fname={File_to_Send_with_Path}, nfname={Remote_File_Name}    for t in [        ('SFTPPlus', 'FTP_CLEAR', '/usr/bin/curl  -Q "-RNFR {Prefix_File_Name}" -Q "-RNTO {Remote_File_Name}" --retry 10 -T {File_to_Send_with_Path} ftp://[PARTNER_REMOTE_SYSTEM_ID]:[PARTNER_CONTROL_PORT] --user [PARTNER_REMOTE_USER]:[PARTNER_REMOTE_PASSWORD]'),        ('SFTPPlus', 'FTP_TLS', '/usr/bin/curl  -Q "-RNFR {Prefix_File_Name}" -Q "-RNTO {Remote_File_Name}" --retry 10 -v -T  {File_to_Send_with_Path} --cacert [PARTNER_CA_CERT] --ftp-ssl --cert [PARTNER_CERT_BUNDLE] ftp://[PARTNER_REMOTE_SYSTEM_ID]:[PARTNER_CONTROL_PORT] --user [PARTNER_REMOTE_USER]:[PARTNER_REMOTE_PASSWORD]'),        ('IMPART', 'IMPART_SEND', 'cmdftf dest=[PARTNER_REMOTE_SYSTEM_ID] code=[PARTNER_CODE] mode=[PARTNER_MODE] file={File_to_Send_with_Path} rfile=(TARGET_PATH){Remote_File_Name} user=[PARTNER_LOCAL_USERNAME] pass=[PARTNER_LOCAL_PASSWORD] ruser=[PARTNER_REMOTE_USER] rupass=[PARTNER_REMOTE_PASSWORD]'),        ('CFT', 'FTG_TYPE', 'cftutil send part=[PARTNER_REMOTE_SYSTEM_ID], idf=[PARTNER_IDF], fname={File_to_Send_with_Path}, nfname=(Target_Directory){Remote_File_Name}'),        ('CFT', 'eFTG_TYPE', 'cftutil send part=[PARTNER_REMOTE_SYSTEM_ID], idf=[PARTNER_IDF], parm=[PARTNER_PARM], fname={File_to_Send_with_Path}, nfname=(TARGET_PATH){Remote_File_Name}'),        ]:        cotspattern_product, cotspattern_pattern_name, cotspattern_prototype = t        result = db_cots_pattern.create_XFERO_COTS_Pattern(cotspattern_product, cotspattern_pattern_name, cotspattern_prototype)        print(result)def insert_XFERO_Priority():    '''    **Purpose:**    Simple data insertion script for the FTH_Priority table    +------------+-------------+----------------------------------------------------+    | Date       | Author      | Change Details                                     |    +============+=============+====================================================+    | 02/07/2013 | Chris Falck | Ported from Perl Version (FalckMon)                |    +------------+-------------+----------------------------------------------------+    '''    for t in [        ('1', 'High Priority'),        ('2', 'Medium Priority'),        ('3', 'Low Priority'),        ]:        priority_level, priority_detail = t        result = db_priority.create_XFERO_Priority(priority_level, priority_detail)        print(result)if __name__ == "__main__":    insert_XFERO_Control()    insert_XFERO_Function()    insert_XFERO_AV_Pattern()    insert_XFERO_Scheduled_Task()    insert_XFERO_COTS_Pattern()    insert_XFERO_Priority()